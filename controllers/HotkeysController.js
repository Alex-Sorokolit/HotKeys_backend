const { HotKey } = require("../models/hotkey");

class HotKeyController {
  // ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è hotkey
  async addHotkey(req, res) {
    const { category, shortcut, description } = req.body;

    if (!category || !shortcut || !description) {
      res.status(400);
      throw new Error("Controller: Please provide all fields");
    }

    // –¥—ñ—Å—Ç–∞—î–º–æ id —ñ–∑ –æ–±'—î–∫—Ç–∞ –∑–∞–ø–∏—Ç—É —ñ –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –≤ owner
    const { _id: owner } = req.user;

    const result = await HotKey.create({
      ...req.body,
      owner,
    });

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ–¥–∞–≤—Å—è –¥–æ–∫—É–º–µ–Ω—Ç —É –±–∞–∑—É –¥–∞–Ω–∏—Ö
    if (!result) {
      res.status(500);
      throw new Error("Server Error");
    }
    res.status(201).json({
      code: 201,
      message: "success",
      data: result,
    });
  }

  // ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è hotkey
  async removeHotKey(req, res) {
    const { id: hotkeyId } = req.params;
    const { _id: userId } = req.user;

    if (!hotkeyId) {
      res.status(400);
      throw new Error("Controller: hotkeyId is required");
    }

    // –∑–Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ id —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –≤—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const result = await HotKey.findOne({
      _id: hotkeyId,
      owner: userId,
    });

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∏–¥–∞–ª–∏–≤—Å—è –¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if (!result) {
      res.status(400);
      throw new Error("Controller: Category not found");
    }

    res.status(200).json({
      status: "success",
      code: 200,
      message: "HotKey deleted",
      data: result,
    });
  }

  // üü® –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è hotkey
  async updateHotkey(req, res) {
    const { id: hotkeyId } = req.params;
    const { _id: userId } = req.user;

    if (!hotkeyId) {
      res.status(400);
      throw new Error("Controller: hotkeyId is required");
    }

    // —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤ –æ–¥–Ω–µ —ñ–∑ –ø–æ–ª—ñ–≤ —Ç–æ –∑–Ω–∞–π—Ç–∏ –≤ –±–∞–∑—ñ —ñ –æ–±–Ω–æ–≤–∏—Ç–∏
    const changedFields = { ...req.body };
    // console.log(changedFields);

    if (!changedFields) {
      res.status(400);
      throw new Error("Controller: Please provide fields for update");
    }

    const result = await HotKey.findByIdAndUpdate(hotkeyId, changedFields, {
      new: true,
    });

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –æ–Ω–æ–≤–∏–≤—Å—è –¥–æ–∫—É–º–µ–Ω—Ç —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if (!result) {
      res.status(500);
      throw new Error("Server Error");
    }
    res.status(200).json({
      code: 200,
      message: "success",
      data: result,
    });
  }

  // ‚èπÔ∏è –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ hotkey by user
  async getAllHotKeys(req, res) {
    const { _id: userId } = req.user;
    const result = await HotKey.find({ owner: userId });

    if (!result) {
      res.status(400);
      throw new Error("Controller: HotKeys not found");
    }

    res.json({
      status: "success",
      code: 200,
      message: "Own HotKeys",
      data: result,
      quantity: result.length,
    });
  }

  // ‚ùå –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ hotkeys –¥–∞–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
  async removeAllbyCategory(req, res) {
    const { id: categoryId } = req.params;
    const { _id: userId } = req.user;

    if (!categoryId) {
      res.status(400);
      throw new Error("Controller: categoryId is required");
    }
    // –∑–Ω–∞–π—Ç–∏ hotkeys –ø–æ id –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–∞–ª–µ–∂–∏—Ç—å –≤–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const result = await HotKey.find({ category: categoryId, owner: userId });

    if (!result) {
      res.status(400);
      throw new Error("Controller: HotKeys not found");
    }
    res.status(200).json({
      status: "success",
      code: 200,
      message: "HotKeys deleted",
      data: result,
    });
  }
}

const HotKeyCtrl = new HotKeyController();
module.exports = HotKeyCtrl;
